# -*- coding: utf-8 -*-
"""Perth House Prices.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tc24tjeCr5WAB3aGQkJsOUcd4X6cv5mr
"""

# Imports necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Loads the dataset
df = pd.read_csv('https://docs.google.com/spreadsheets/d/1vqrTsuJqirm5LTEeTmmg-aYBAacBKxZfXskRttwhKr8/gviz/tq?tqx=out:csv&sheet=all_perth_310121')

# Selects features (input) and target (output)
X = df[['BEDROOMS', 'BATHROOMS', 'GARAGE', 'LAND_AREA', 'FLOOR_AREA', 'BUILD_YEAR', 'CBD_DIST', 'NEAREST_STN_DIST', 'POSTCODE', 'LATITUDE', 'LONGITUDE', 'NEAREST_SCH_DIST', 'NEAREST_SCH_RANK']]
y = df['PRICE']

# Normalizes the features using Min-Max scaling
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Splits the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Reshapes data for LSTM (assuming a sequence length of 1)
X_train = X_train.reshape(X_train.shape[0], 1, X_train.shape[1])
X_test = X_test.reshape(X_test.shape[0], 1, X_test.shape[1])

# Builds the LSTM model
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(1, X_train.shape[2])))
model.add(Dense(1))  # Output layer

# Compiles the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Trains the model
model.fit(X_train, y_train, epochs=100, batch_size=32)

# Evaluates the model
loss = model.evaluate(X_test, y_test)
print(f'Test Loss: {loss}')

# Makes predictions
y_pred = model.predict(X_test)

# Plots actual vs. predicted prices
plt.figure(figsize=(12, 6))
plt.plot(y_test.values, label='Actual Prices')
plt.plot(y_pred, label='Predicted Prices')
plt.legend()
plt.title('House Price Prediction')
plt.show()